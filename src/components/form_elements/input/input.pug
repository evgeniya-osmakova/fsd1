mixin input(option)
  -const { type, size, placeholder, arrow, dropdown, title, hover, clarification, isMasked, isDataPicker } = option;
  -const inputSize = `input-area--${size}`;
  -const inputHover = `input--${hover}`;
  -const inputBorderType = (dropdown.open) ? `input--half-border-radius` : `input--full-border-radius`;
  -const arrowOpacity = (dropdown.open) ? `input-expansion--bright` : `input-expansion--dim`;
  -const maskedType = (isMasked) ? 'masked' : 'regular';
  -const datePicker = (isDataPicker) ? 'datepicker-here' : '';

    if title
      .input-area(class = inputSize)
        .input-area__top.input-top
          h3.input-top__header #{title}
          .input-top__clarification #{clarification}
        if arrow
          .input-area__bottom
            input.input(type = type, class = `${inputHover} ${inputBorderType}`, placeholder = placeholder)
            i.material-icons.input-arrow arrow_forward
        else if dropdown.existence
          .input-area__bottom
            input.input.input--dropdown(type = type, class = `${inputHover} ${inputBorderType} ${datePicker}`, placeholder = placeholder)
            i.material-icons.input-expansion(data-input=dropdown.type data-type='dropdown' class=`${arrowOpacity}`) expand_more
        else
          input.input(type = type, class = `${inputHover} ${inputBorderType}`, placeholder=placeholder, data-type=maskedType)
    else
      .input-area(class = inputSize)
        if arrow
          .input-area__bottom
            input.input.input--absolute(type = type, class = `${inputHover} ${inputBorderType}`, placeholder = placeholder)
            i.material-icons.input-arrow arrow_forward
        else
          input.input(type = type, class = `${inputHover} ${inputBorderType}`, placeholder = placeholder)
